/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.26
 * Generated at: 2022-11-21 09:17:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member.pro;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class idCheckPro_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      member.model.memberDAO dao = null;
      dao = (member.model.memberDAO) _jspx_page_context.getAttribute("dao", jakarta.servlet.jsp.PageContext.PAGE_SCOPE);
      if (dao == null){
        dao = new member.model.memberDAO();
        _jspx_page_context.setAttribute("dao", dao, jakarta.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>아이디 중복 체크</title>\r\n");
      out.write("<style>\r\n");
      out.write("	#wrap{\r\n");
      out.write("		width:490px; text-align:center; margin:0 auto;\r\n");
      out.write("	}\r\n");
      out.write("	#chk{ text-align:center;}\r\n");
      out.write("	#cancelBtn{visibility:visible;}\r\n");
      out.write("	#useBtn{visibility:hidden;}\r\n");
      out.write("</style>\r\n");

	String id = request.getParameter("id");
	
	//memberDAO에 아이디를 체크하는 메소드 호출
	int chk = dao.idCheck(id); //chk=1:아이디가 있음(사용불가), chk=1:아이디가 없음(사용가능)
	
	if(chk==1){
		out.println("<br>");
		out.println("<font color='red' size='2'>사용 불가능한 아이디입니다.(이미 사용중인 아이디)</font>");

      out.write("\r\n");
      out.write("		<script>\r\n");
      out.write("			//<사용하기>버튼을 숨김.\r\n");
      out.write("			window.onload=function(){\r\n");
      out.write("				documnet.getElementById(\"useBtn\").style.visibility=\"hidden\";\r\n");
      out.write("			}\r\n");
      out.write("		</script>\r\n");

	} else{
		out.println("<br>");
		out.println("<font color='red' size='2'>사용가능한 아이디입니다.</font>");

      out.write("\r\n");
      out.write("	<!-- 스크립트릿으로 안묶는이유? 자바언어가 아닌 스크립트언어라서 + 화면에 나타나게 하려고. -->\r\n");
      out.write("	<script>\r\n");
      out.write("		window.onload=function(){\r\n");
      out.write("			/* console.log(\"ddd\"); */\r\n");
      out.write("			document.getElementById(\"useBtn\").style.visibility=\"visible\";\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");

	}

      out.write("	\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div id=\"wrap\">\r\n");
      out.write("	<br>\r\n");
      out.write("	<b><font size=\"4\" color=\"gray\">아이디 중복 체크</font></b>\r\n");
      out.write("	<hr size=\"1\" width=\"460\">\r\n");
      out.write("	<br>\r\n");
      out.write("	<div id=\"chk\">\r\n");
      out.write("		<form id=\"checkForm\" name=\"frm1\">\r\n");
      out.write("			<input type=\"text\" name=\"id\" id=\"userId\" value=\"");
      out.print(id );
      out.write("\">\r\n");
      out.write("			<input type=\"button\" value=\"중복확인\" onclick=\"loadIdCheck()\">\r\n");
      out.write("		</form>\r\n");
      out.write("		<div id =\"msg\"></div>\r\n");
      out.write("		<br>\r\n");
      out.write("		<input id=\"cancelBtn\" type=\"button\" value=\"취소\" onclick=\"window.close()\">\r\n");
      out.write("		<input id=\"useBtn\" type=\"button\" value=\"사용하기\" onclick=\"sendCheckValue()\">\r\n");
      out.write("	</div>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
